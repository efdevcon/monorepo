-- Create DID table
CREATE TABLE atproto_dids (
    did TEXT PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_spammer BOOLEAN DEFAULT FALSE,
    alias TEXT,
    contact TEXT,
    additional_details TEXT
);

-- Create Records table
CREATE TABLE atproto_records (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_by TEXT NOT NULL REFERENCES atproto_dids(did),
    rkey TEXT NOT NULL,
    rev TEXT,
    collection TEXT NOT NULL,
    cursor TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    show_on_calendar BOOLEAN DEFAULT FALSE,
    event_schema TEXT DEFAULT 'org.devcon.event',
    record_passed_review JSONB,
    record_needs_review JSONB,
    
    CONSTRAINT unique_did_rkey UNIQUE(created_by, rkey)
);

-- Create indexes for performance
CREATE INDEX idx_atproto_records_created_by ON atproto_records(created_by);
CREATE INDEX idx_atproto_records_collection ON atproto_records(collection);
CREATE INDEX idx_atproto_records_rkey ON atproto_records(rkey);

-- Admin dashboard indexes
CREATE INDEX idx_atproto_records_needs_review ON atproto_records USING gin(record_needs_review) WHERE record_needs_review IS NOT NULL;

-- Calendar API index
CREATE INDEX idx_atproto_records_calendar ON atproto_records (show_on_calendar, record_passed_review) WHERE show_on_calendar = true AND record_passed_review IS NOT NULL;

-- Updated timestamp index for admin sorting
CREATE INDEX idx_atproto_records_updated_at ON atproto_records(updated_at DESC);

-- Comments for documentation
COMMENT ON TABLE atproto_dids IS 'Stores ATProto DID information and metadata';
COMMENT ON TABLE atproto_records IS 'Stores ATProto records with review workflow';
COMMENT ON COLUMN atproto_records.record_needs_review IS 'JSON blob of record awaiting admin review';
COMMENT ON COLUMN atproto_records.record_passed_review IS 'JSON blob of admin-approved record'; 