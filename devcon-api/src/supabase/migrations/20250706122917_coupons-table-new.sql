-- Create coupons table
CREATE TABLE coupons (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    claimed_by TEXT,
    collection TEXT NOT NULL,
    claimed_date TIMESTAMP WITH TIME ZONE,
    value TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ensure unique combination of collection and value
    CONSTRAINT unique_collection_value UNIQUE(collection, value)
);

-- Create indexes for performance
CREATE INDEX idx_coupons_collection ON coupons(collection);
CREATE INDEX idx_coupons_claimed_by ON coupons(claimed_by);

-- Enable RLS
ALTER TABLE coupons ENABLE ROW LEVEL SECURITY;

-- Allow only authorized user to select coupons (for reading)
CREATE POLICY "Allow authorized user to select coupons"
ON coupons
FOR SELECT
USING (
  auth.email() = 'lasse.jacobsen@ethereum.org'
);

-- Allow only authorized user to insert coupons
CREATE POLICY "Allow authorized user to insert coupons"
ON coupons
FOR INSERT
WITH CHECK (
  auth.email() = 'lasse.jacobsen@ethereum.org'
);

-- Allow only authorized user to update coupons
CREATE POLICY "Allow authorized user to update coupons"
ON coupons
FOR UPDATE
USING (
  auth.email() = 'lasse.jacobsen@ethereum.org'
)
WITH CHECK (
  auth.email() = 'lasse.jacobsen@ethereum.org'
);

-- Allow only authorized user to delete coupons
CREATE POLICY "Allow authorized user to delete coupons"
ON coupons
FOR DELETE
USING (
  auth.email() = 'lasse.jacobsen@ethereum.org'
);

-- Comments for documentation
COMMENT ON TABLE coupons IS 'Stores coupon codes with collection and claim information';
COMMENT ON COLUMN coupons.claimed_by IS 'Email or identifier of who claimed the coupon';
COMMENT ON COLUMN coupons.collection IS 'Collection or category the coupon belongs to';
COMMENT ON COLUMN coupons.claimed_date IS 'When the coupon was claimed';
COMMENT ON COLUMN coupons.value IS 'The actual coupon code/value'; 