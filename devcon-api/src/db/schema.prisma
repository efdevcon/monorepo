generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:devcon.db"
}

model Event {
  id String @id @unique
  edition Int
  title String
  description String
  location String
  startDate DateTime
  endDate DateTime
  speakers Speaker[]
  sessions Session[]
  venue_name String
  venue_description String
  venue_address String
  venue_website String
  venue_directions String
  rooms Room[]
  version String
}

model Room {
  id String @id @unique
  name String
  description String?
  info String?
  capacity Int?

  youtubeStreamUrl_1 String?
  youtubeStreamUrl_2 String?
  youtubeStreamUrl_3 String?
  youtubeStreamUrl_4 String?
  translationUrl String?

  events Event[]
  sessions Session[]
}

model Speaker {
  id String @id @unique
  sourceId String
  name String
  avatar String
  description String?
  twitter String?
  farcaster String?
  lens String?
  ens String?
  github String?
  hash String?
  events Event[]
  sessions Session[]
}

model Session {
  id String @id @unique
  sourceId String
  title String
  description String
  track String
  type String
  expertise String
  audience String?
  featured Boolean?
  doNotRecord Boolean?
  tags String
  keywords String?
  duration Int?
  language String?

  sources_swarmHash String?
  sources_youtubeId String?
  sources_ipfsHash String?
  sources_livepeerId String?
  sources_streamethId String?

  transcript_vtt String?
  transcript_text String?

  speakers Speaker[]
  event Event @relation(fields: [eventId], references: [id])
  eventId String

  slot_start DateTime?
  slot_end DateTime?
  slot_room Room? @relation(fields: [slot_roomId], references: [id])
  slot_roomId String?

  resources_presentation String?
  resources_slides String?
 
  relatedSessions RelatedSession[] @relation(name: "Related")
  recommendedSessions RecommendedSession[] @relation(name: "Recommended")
}

model RelatedSession {
  id Int @id @default(autoincrement())
  sessionId String
  sourceId String
  vector Bytes?

  other Session @relation("Related", fields: [otherId], references: [id], onDelete: Cascade)
  otherId String

  similarity Float
}

model RecommendedSession {
  id Int @id @default(autoincrement())
  sessionId String
  sourceId String
  vector Bytes?

  other Session @relation("Recommended", fields: [otherId], references: [id], onDelete: Cascade)
  otherId String
  
  similarity Float
}
